# -*- coding: utf-8 -*-
"""naive_bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v0rGykg5C00ETF9bqkMVVoHWkwl0qfaQ

## Importando bibliotecas necessárias
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""## 1. Carregar a base de dados escolhida do Kaggle

Explique rapidamente em uma célula sobre do que se trada a base de dados.
"""

df = sns.load_dataset("titanic")
df.head()

"""## 2. Análise básica da base"""

df.info()

df.columns.tolist()

df.describe()

#somando valores nulos de cada coluna
df.isnull().sum()

#colocando em ordem decrescente
df['age'].value_counts(ascending=False)

"""## 3. Visualizações (crie pelo menos duas)"""

fig, axs = plt.subplots(1, 3, figsize=(15, 5))

axs[0].hist(df[df['survived'] == 0]['age'], bins=20, color='gray',edgecolor='black' )
axs[0].set_xlabel('Idade',fontsize = 12)
axs[0].set_ylabel('Pessoas',fontsize = 12)
axs[0].set_title('Distribuição de Idade dos não Sobreviventes',fontsize = 12, loc='left')


axs[1].boxplot(df[df['survived'] == 1]['age'] )
axs[1].set_xlabel('Idade',fontsize = 12)
axs[1].set_title('Distribuição de Idade dos Sobreviventes',fontsize = 12,loc='left')


sns.countplot(data=df, x="survived", ax=axs[2], palette=['salmon', 'lightblue'])
axs[2].set_xlabel('Sobreviveu', fontsize = 12)
axs[2].set_ylabel('Pessoas', fontsize = 12)
axs[2].set_title('Quantidade de Sobreviventes e Não Sobreviventes',fontsize = 11, loc='left')


ymin = 0
ymax = 600
for axs[1] in axs.ravel():
  axs[2].set_ylim(ymin,ymax)

plt.tight_layout()
plt.show()

"""## 4. Pré-processamento dos dados"""

#selecionando colunas
df = df[["survived", "pclass", "sex", "age", "fare"]]

#tirando valores nulos e colocando medianas
df["age"].fillna(df["age"].median(), inplace=True)

#transformando a coluna sex em 1 e 0
df["sex"] = df["sex"].map({"male": 0, "female": 1})

#separando variavel x e y
X = df.drop("survived", axis=1)
y = df["survived"]

"""## 5. Separar treino e teste"""

#dividindo em 80% treino e 20% teste
#x são variaveis verdadeira e y é se sovreviveu ou não
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## 6. Modelo Naive Bayes"""

#criando o modelo de naive bayes e treinando o modelo
modelo = GaussianNB()
modelo.fit(X_train, y_train)

"""# 7. Previsões e acurácia"""

#prevendo o resultado
y_pred = modelo.predict(X_test)

#acuracia de naive bayes
acuracia = accuracy_score(y_test, y_pred)
print("Acurácia de Naive Bayes:", acuracia)

#ver onde a tabela acertou e errou
print(confusion_matrix(y_test, y_pred))

#dando metricas

print("\nRelatório de Classificação:", classification_report(y_test, y_pred))

"""o modelo foi bom para identificar os não sobreviventes e errou mais pra quem sobreviveu e a acuracia total ficou em 76%"""